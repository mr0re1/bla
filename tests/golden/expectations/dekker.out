----- step #0:
 def p0():                            | def p1_brute():                      | wants_to_enter_0=False
 ->  wants_to_enter_0 = True          | ->  wants_to_enter_1 = True          | wants_to_enter_1=False
     while wants_to_enter_1:          |                                      | turn=False
         if turn == True:             |     # critical section               | critical_section=False
             wants_to_enter_0 = False |     assert critical_section == False |
             while turn == True:      |     critical_section = True          |
                 pass  # busy wait    |     critical_section = False         |
             wants_to_enter_0 = True  |     # releasing critical section     |
                                      |     turn = False                     |
     # critical section               |     wants_to_enter_1 = False         |
     assert critical_section == False |                                      |
     critical_section = True          |                                      |
     critical_section = False         |                                      |
     # releasing critical section     |                                      |
     turn = True                      |                                      |
     wants_to_enter_0 = False         |                                      |


----- step #1:
 def p0():                            | def p1_brute():                      | wants_to_enter_0=True
     wants_to_enter_0 = True          | ->  wants_to_enter_1 = True          | wants_to_enter_1=False
 ->  while wants_to_enter_1:          |                                      | turn=False
         if turn == True:             |     # critical section               | critical_section=False
             wants_to_enter_0 = False |     assert critical_section == False |
             while turn == True:      |     critical_section = True          |
                 pass  # busy wait    |     critical_section = False         |
             wants_to_enter_0 = True  |     # releasing critical section     |
                                      |     turn = False                     |
     # critical section               |     wants_to_enter_1 = False         |
     assert critical_section == False |                                      |
     critical_section = True          |                                      |
     critical_section = False         |                                      |
     # releasing critical section     |                                      |
     turn = True                      |                                      |
     wants_to_enter_0 = False         |                                      |


----- step #2:
 def p0():                            | def p1_brute():                      | wants_to_enter_0=True
     wants_to_enter_0 = True          | ->  wants_to_enter_1 = True          | wants_to_enter_1=False
     while wants_to_enter_1:          |                                      | turn=False
         if turn == True:             |     # critical section               | critical_section=False
             wants_to_enter_0 = False |     assert critical_section == False |
             while turn == True:      |     critical_section = True          |
                 pass  # busy wait    |     critical_section = False         |
             wants_to_enter_0 = True  |     # releasing critical section     |
                                      |     turn = False                     |
     # critical section               |     wants_to_enter_1 = False         |
 ->  assert critical_section == False |                                      |
     critical_section = True          |                                      |
     critical_section = False         |                                      |
     # releasing critical section     |                                      |
     turn = True                      |                                      |
     wants_to_enter_0 = False         |                                      |


----- step #3:
 def p0():                            | def p1_brute():                      | wants_to_enter_0=True
     wants_to_enter_0 = True          |     wants_to_enter_1 = True          | wants_to_enter_1=True
     while wants_to_enter_1:          |                                      | turn=False
         if turn == True:             |     # critical section               | critical_section=False
             wants_to_enter_0 = False | ->  assert critical_section == False |
             while turn == True:      |     critical_section = True          |
                 pass  # busy wait    |     critical_section = False         |
             wants_to_enter_0 = True  |     # releasing critical section     |
                                      |     turn = False                     |
     # critical section               |     wants_to_enter_1 = False         |
 ->  assert critical_section == False |                                      |
     critical_section = True          |                                      |
     critical_section = False         |                                      |
     # releasing critical section     |                                      |
     turn = True                      |                                      |
     wants_to_enter_0 = False         |                                      |


----- step #4:
 def p0():                            | def p1_brute():                      | wants_to_enter_0=True
     wants_to_enter_0 = True          |     wants_to_enter_1 = True          | wants_to_enter_1=True
     while wants_to_enter_1:          |                                      | turn=False
         if turn == True:             |     # critical section               | critical_section=False
             wants_to_enter_0 = False |     assert critical_section == False |
             while turn == True:      | ->  critical_section = True          |
                 pass  # busy wait    |     critical_section = False         |
             wants_to_enter_0 = True  |     # releasing critical section     |
                                      |     turn = False                     |
     # critical section               |     wants_to_enter_1 = False         |
 ->  assert critical_section == False |                                      |
     critical_section = True          |                                      |
     critical_section = False         |                                      |
     # releasing critical section     |                                      |
     turn = True                      |                                      |
     wants_to_enter_0 = False         |                                      |


----- step #5:
 def p0():                            | def p1_brute():                      | wants_to_enter_0=True
     wants_to_enter_0 = True          |     wants_to_enter_1 = True          | wants_to_enter_1=True
     while wants_to_enter_1:          |                                      | turn=False
         if turn == True:             |     # critical section               | critical_section=True
             wants_to_enter_0 = False |     assert critical_section == False |
             while turn == True:      |     critical_section = True          |
                 pass  # busy wait    | ->  critical_section = False         |
             wants_to_enter_0 = True  |     # releasing critical section     |
                                      |     turn = False                     |
     # critical section               |     wants_to_enter_1 = False         |
 ->  assert critical_section == False |                                      |
     critical_section = True          |                                      |
     critical_section = False         |                                      |
     # releasing critical section     |                                      |
     turn = True                      |                                      |
     wants_to_enter_0 = False         |                                      |


Assertion failed: assert critical_section == False
